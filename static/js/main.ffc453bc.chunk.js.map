{"version":3,"sources":["CityWeather.js","SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["CityWeather","props","useState","cod","weather","main","icon","temp","humidity","pressure","dt","sys","country","surise","sunset","wind","speed","deg","setWeather","days","convertTimestamp","timestamp","date","Date","getDay","toLocaleTimeString","substring","useEffect","interval","setInterval","a","async","fetch","cityName","resp","json","respJSON","alert","message","deletePageEvent","id","downloadData","clearInterval","params","className","parseInt","weatherstate","map","e","index","uniqid","key","src","size","sunrise","style","transform","locationIcon","loc","deleteIcon","onClick","SearchBar","city","setCity","add","addCity","type","value","placeholder","onChange","target","onKeyPress","App","location","setLocation","JSON","parse","localStorage","getItem","cities","setCities","deletePage","id_city","filter","getCity","val","String","toUpperCase","isOn","isCityOnTheList","locate","response","downloadLocation","setItem","stringify","searcher","listOfCities","locationComp","org","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sXAoIeA,MA3Hf,SAAqBC,GAAM,MAGWC,mBAAS,CAACC,IAAK,OAAQC,QAAQ,CAAC,CAACC,KAAM,GAAIC,KAAK,KAAMD,KAAM,CAACE,KAAM,GAAIC,SAAU,GAAIC,SAAU,IAAKC,GAAI,GAAIC,IAAK,CAACC,QAAS,GAAIC,OAAQ,GAAIC,OAAQ,IAAKC,KAAM,CAACC,MAAM,GAAIC,IAAK,KAHzL,mBAGZb,EAHY,KAGHc,EAHG,KAIbC,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAuBhF,SAASC,EAAiBC,GACtB,IAAIC,EAAO,IAAIC,KAAe,IAAVF,GACpB,OAAOF,EAAKG,EAAKE,UAAY,KAAOF,EAAKG,qBAAqBC,UAAU,EAAG,GAV/EC,qBAAU,WACN,IAAMC,EAAWC,aAAY,YAdjC,qBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,MAAM,qDAAD,OAAsD/B,EAAMgC,SAA5D,6CAD5B,cACUC,EADV,kBAAAJ,EAAA,MAG2BI,EAAKC,QAHhC,OAIwB,SADdC,EAHV,QAIgBjC,KACRkC,MAAMD,EAASE,SACfrC,EAAMsC,gBAAgBtC,EAAMuC,KAG5BtB,EAAWkB,GATnB,qCAeYK,KACY,SAAhBrC,EAAQD,IAAkB,IAAO,MAErC,OAAO,kBAAMuC,cAAcd,OAc/B,IAAMe,EAAU,yBAAKC,UAAU,UACX,yBAAKA,UAAU,OACX,6BAAK,yCACL,6BAAMxC,EAAQC,KAAKI,SAAnB,SAEJ,yBAAKmC,UAAU,OACVC,SAASzC,EAAQC,KAAKE,KAAO,IAAK,IADvC,SAGA,yBAAKqC,UAAU,OACX,6BAAK,yCACT,6BAAMxC,EAAQC,KAAKG,SAAnB,QAIdsC,EAAgB1C,EAAQA,QAAQ2C,KAAI,SAAAC,GACtC,IAAIC,EAAQC,MACZ,OACgB,yBAAKC,IAAKF,EAAOL,UAAU,gBACvB,yBAAKA,UAAU,qBACXI,EAAE3C,MAEN,yBAAKuC,UAAU,qBACX,yBAAKQ,IAAG,2CAAsCJ,EAAE1C,KAAxC,eAK9BQ,EAAS,yBAAK8B,UAAU,UACV,yBAAKA,UAAU,OACX,kBAAC,IAAD,CAAUS,KAAM,MAEpB,yBAAKT,UAAU,OACf,6BAAK,uCACJ,6BAAMxB,EAAiBhB,EAAQO,IAAIG,WAIlDwC,EAAU,yBAAKV,UAAU,UACX,yBAAKA,UAAU,OACV,kBAAC,IAAD,CAAWS,KAAM,MAEtB,yBAAKT,UAAU,OACX,6BAAK,wCACJ,6BAAMxB,EAAiBhB,EAAQO,IAAI2C,YAItDvC,EAAO,yBAAK6B,UAAU,UACpB,yBAAKA,UAAU,OACX,kBAAC,IAAD,CAAkBS,KAAM,GAAIE,MAAO,CAACC,UAAU,UAAD,OAAY,GAAKpD,EAAQW,KAAKE,IAA9B,YAEjD,yBAAK2B,UAAU,OACP,6BAAK,2CACL,6BAzDLC,SAA4B,KAAnBzC,EAAQW,KAAKC,MAAW,IAAM,IAyDlC,WAIVyC,GAA8B,IAAdxD,EAAMyD,IAAgB,kBAAC,IAAD,MAAkB,+BACxDC,GAA4B,IAAd1D,EAAMyD,IAAgB,+BAClC,yBAAKd,UAAU,SAASgB,QAAS,kBAAM3D,EAAMsC,gBAAgBtC,EAAMuC,MAAK,kBAAC,IAAD,OAEhF,OACI,yBAAKI,UAAU,QACX,yBAAKA,UAAU,SACvB,yBAAKA,UAAU,OAAM,2BAAI3C,EAAMgC,SAAV,IAAqB7B,EAAQO,IAAIC,SAAtD,IAAoE6C,EAApE,KACaE,GAEL,yBAAKf,UAAU,SACf,yBAAKA,UAAU,OAAf,IAAwBxB,EAAiBhB,EAAQM,IAAjD,MAECoC,EACAH,EACA5B,EACAD,EACAwC,I,MCnFFO,MAlCf,SAAmB5D,GAAM,MAEGC,mBAAS,IAFZ,mBAEd4D,EAFc,KAERC,EAFQ,KAIrB,SAASC,IACO,KAATF,IACC7D,EAAMgE,QAAQH,GACdC,EAAQ,KAIhB,OACI,yBAAKnB,UAAU,OACX,2BACIsB,KAAK,OACLC,MAAOL,EACPM,YAAY,sBACZC,SAAU,SAAArB,GAAMe,EAAQf,EAAEsB,OAAOH,QACjCI,WAAa,SAAAvB,GACQ,UAAVA,EAAEG,KACDa,OAKhB,2BACIE,KAAK,SACLN,QAAS,WAAOI,KAChBG,MAAM,UCwDPK,MAhFf,WAAe,MAEmBtE,mBAAS,CAAC4D,KAAM,KAFnC,mBAENW,EAFM,KAEIC,EAFJ,OAGexE,mBAASyE,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,IAHtE,mBAGNC,EAHM,KAGEC,EAHF,KAwBb,SAASC,EAAWC,GAEhBF,EAAUD,EAAOI,QACf,SAAAnC,GACE,OAAQA,EAAER,KAAO0C,EAAWlC,EAAI,SAkBxC,SAASoC,EAAQC,IAbjB,SAAyBA,GACvB,GAAGC,OAAOb,EAASX,MAAMyB,gBAAkBD,OAAOD,GAAKE,cACrD,OAAO,EAGP,IAAIC,GAAO,EAIX,OAHAT,EAAOhC,KAAK,SAAAC,GACVwC,EAAQxC,EAAEc,OAASwB,OAAOD,GAAKE,iBAE1BC,EAMNC,CAAgBJ,GAIlBL,EAAU,GAAD,mBACHD,GADG,CAEN,CAACvC,GAAG,GAAD,OAAKU,OAAYY,KAAMwB,OAAOD,GAAKE,cAAeG,QAAQ,MAL/DrD,MAAM,+CAnCVV,qBAAU,YAPV,qBAAAG,EAAAC,OAAA,kEAAAD,EAAA,MACyBE,MAAM,4BAD/B,cACQ2D,EADR,kBAAA7D,EAAA,MAEyB6D,EAASxD,QAFlC,OAEQC,EAFR,OAIEsC,EAAY,eAAItC,EAAL,CAAeI,GAAIU,SAJhC,qCAQE0C,KACC,CAACnB,IAGJ9C,qBAAU,WACNkD,aAAagB,QAAQ,SAAUlB,KAAKmB,UAAUf,MAC/C,CAACA,IAsCJ,IAAMgB,EAAW,gCAAQ,kBAAC,EAAD,CAAW9B,QAAW,SAAAjB,GAAC,OAAIoC,EAAQpC,OAEtDgD,EAAejB,EAAOhC,KAAK,SAAAC,GAC/B,OACE,yBAAKG,IAAKH,EAAER,GAAII,UAAU,WAAU,kBAAC,EAAD,CAAac,IAAOV,EAAE0C,OAAQzD,SAAYe,EAAEc,KAAMtB,GAAMQ,EAAER,GAAID,gBAAmB,SAAAS,GAAC,OAAIiC,EAAWjC,UAInIiD,EAAe,yBAAK9C,IAAKsB,EAASyB,IAAKtD,UAAU,WAAU,kBAAC,EAAD,CAAac,KAAO,EAAMzB,SAAYqD,OAAOb,EAASX,MAAMyB,cAAe/C,GAAMiC,EAASjC,GAAID,gBAAmB,SAAAS,GAAC,OAAIiC,EAAWjC,OAElM,OACE,yBAAKJ,UAAU,OACZmD,EACD,yBAAKnD,UAAU,cACZqD,EACAD,KCtEWG,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ffc453bc.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './CityWeather.css';\r\nimport PropTypes from 'prop-types';\r\nimport {TiDelete} from 'react-icons/ti';\r\nimport {MdLocationOn} from 'react-icons/md';\r\nimport {GiSunset, GiSunrise, GiStrikingArrows} from 'react-icons/gi';\r\nimport uniqid from 'uniqid';\r\n\r\n\r\nfunction CityWeather(props){    /// props.city, props.deleteEventPage, props.loc, props.id\r\n\r\n        // initializing first weather state\r\n        const [weather, setWeather] = useState({cod: \"-100\", weather:[{main: \"\", icon:\"\"}], main: {temp: \"\", humidity: \"\", pressure: \"\"}, dt: \"\", sys: {country: \"\", surise: \"\", sunset: \"\"}, wind: {speed:\"\", deg: 0}});\r\n        const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        \r\n        async function downloadData() {\r\n            const resp = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${props.cityName}&APPID=6b3faa1cc7ff27120415d4457bd66029`);\r\n        \r\n            const respJSON = await resp.json();\r\n            if(respJSON.cod === \"404\"){\r\n                alert(respJSON.message);\r\n                props.deletePageEvent(props.id);\r\n            }\r\n            else{\r\n                setWeather(respJSON);\r\n            }\r\n        };\r\n        \r\n        useEffect(() => {\r\n            const interval = setInterval(()=>{\r\n                    downloadData();\r\n            }, (weather.cod === \"-100\") ? 1000 : 3600000);\r\n\r\n            return () => clearInterval(interval);\r\n        }); \r\n\r\n        function convertTimestamp(timestamp){\r\n            let date = new Date(timestamp*1000);\r\n            return days[date.getDay()] + \", \" + date.toLocaleTimeString().substring(0, 5);\r\n        }\r\n\r\n        function convertWindSpeed(){\r\n            // changing m/s to km/h\r\n            return parseInt(weather.wind.speed*3600/1000, 10);\r\n        }\r\n\r\n        // html elements\r\n        const params =  <div className=\"params\">\r\n                            <div className=\"lab\">\r\n                                <div><b>Pressure:</b></div>\r\n                                <div>{weather.main.pressure} hPa</div>\r\n                            </div>\r\n                            <div className=\"lab\">\r\n                                {parseInt(weather.main.temp - 273, 10)}Â°C\r\n                            </div>\r\n                            <div className=\"lab\">\r\n                                <div><b>Humidity:</b></div>\r\n                            <div>{weather.main.humidity} %</div>\r\n                            </div>\r\n                        </div>\r\n\r\n        const weatherstate =  weather.weather.map(e => {\r\n            let index = uniqid();\r\n            return (                   \r\n                            <div key={index} className=\"weatherState\">\r\n                                <div className=\"weatherState__lab\">\r\n                                   {e.main}\r\n                                </div>\r\n                                <div className=\"weatherState__lab\">\r\n                                    <img src={`https://openweathermap.org/img/w/${e.icon}.png`} />\r\n                                </div>\r\n                            </div>\r\n        );});\r\n\r\n        const sunset = <div className=\"params\"> \r\n                            <div className=\"lab\">\r\n                                <GiSunset size={50}/>\r\n                            </div>\r\n                            <div className=\"lab\">\r\n                            <div><b>Sunset:</b></div>\r\n                             <div>{convertTimestamp(weather.sys.sunset)}</div>\r\n                             </div>\r\n                            </div>\r\n\r\n        const sunrise = <div className=\"params\"> \r\n                            <div className=\"lab\">\r\n                                 <GiSunrise size={50}/>\r\n                            </div>\r\n                            <div className=\"lab\">\r\n                                <div><b>Sunrise:</b></div>\r\n                                 <div>{convertTimestamp(weather.sys.sunrise)}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n        const wind = <div className=\"params\">\r\n                <div className=\"lab\">\r\n                    <GiStrikingArrows size={50} style={{transform: `rotate(${45 + weather.wind.deg}deg)`}} />\r\n                </div>\r\n                <div className=\"lab\">\r\n                        <div><b>Wind speed:</b></div>\r\n                        <div>{convertWindSpeed()} km/h</div>\r\n                    </div>\r\n                </div>\r\n\r\n        const locationIcon = (props.loc === true) ? <MdLocationOn />: <span></span>;\r\n        const deleteIcon = (props.loc === true) ? <span></span> :\r\n                <div className=\"delete\" onClick={() => props.deletePageEvent(props.id)}><TiDelete /></div> ;\r\n\r\n        return (\r\n            <div className=\"tile\"> \r\n                <div className=\"title\">\r\n        <div className=\"lab\"><b>{props.cityName} {weather.sys.country}</b> {locationIcon} </div>\r\n                    {deleteIcon}\r\n                </div>\r\n                <div className=\"title\">\r\n                <div className=\"lab\" > {convertTimestamp(weather.dt)} </div>\r\n                </div>\r\n                {weatherstate}\r\n                {params}\r\n                {wind}\r\n                {sunset}\r\n                {sunrise}\r\n            </div>\r\n        );\r\n}\r\n\r\nCityWeather.propTypes = {\r\n    city: PropTypes.string,\r\n    deleteEventPage: PropTypes.func,\r\n    loc: PropTypes.bool\r\n};\r\n\r\nexport default CityWeather;","import React, {useState} from 'react';\r\nimport './SearchBar.css'\r\n\r\n\r\nfunction SearchBar(props){  // props.addCity \r\n\r\n    const [city, setCity] = useState(\"\");\r\n\r\n    function add(){\r\n        if(city !== \"\"){\r\n            props.addCity(city); \r\n            setCity(\"\");\r\n        }\r\n    }\r\n \r\n    return (\r\n        <div className=\"bar\">\r\n            <input \r\n                type=\"text\" \r\n                value={city} \r\n                placeholder=\"Type city's name...\" \r\n                onChange={e => {setCity(e.target.value)}}\r\n                onKeyPress={ e => {\r\n                        if(e.key === 'Enter'){\r\n                            add();\r\n                        } \r\n                    }\r\n                }\r\n            />\r\n            <input \r\n                type=\"button\" \r\n                onClick={() => {add()} } \r\n                value=\"Add\" \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport CityWeather from './CityWeather';\nimport SearchBar from './SearchBar';\nimport uniqid from 'uniqid';\n\n\n\nfunction App() {\n  // state hooks\n  const [location, setLocation] = useState({city: \"\"});\n  const [cities, setCities] = useState(JSON.parse(localStorage.getItem('cities')) || []);\n\n  // find user's location\n  \n  async function downloadLocation(){\n    const response = await fetch(\"http://ip-api.com/json/\");\n    const respJSON = await response.json();\n\n    setLocation({...respJSON, id: uniqid()});\n  }\n\n  useEffect(()=>{\n    downloadLocation();\n  }, [location]);\n  \n  // saving list of cities to a local storage\n  useEffect(() => {\n      localStorage.setItem('cities', JSON.stringify(cities));\n  }, [cities]);\n\n  // deleting city's weather tab\n  function deletePage(id_city){\n\n      setCities(cities.filter(\n        e => {\n          return (e.id !== id_city) ? e : null ;\n        }\n      ));\n  }\n\n  function isCityOnTheList(val){\n    if(String(location.city).toUpperCase() === String(val).toUpperCase()){\n      return true;\n    }\n    else{\n      let isOn = false;\n      cities.map( e => {\n        isOn = (e.city === String(val).toUpperCase()) ? true : false;\n      });\n      return isOn;\n    }\n  }\n\n  function getCity(val){\n\n    if(isCityOnTheList(val)){\n      alert(\"This location is already added to the list!\");\n    }\n    else{\n     setCities([\n        ...cities,\n        {id: `${uniqid()}`, city: String(val).toUpperCase(), locate: false}\n      ]);\n    }\n  }\n\n  const searcher = <header><SearchBar addCity = {e => getCity(e)}/></header>\n\n  const listOfCities = cities.map( e => {\n    return (\n      <div key={e.id} className=\"cityTab\"><CityWeather loc = {e.locate} cityName = {e.city} id = {e.id} deletePageEvent = {e => deletePage(e)} /></div>\n    );\n  });\n\n  const locationComp = <div key={location.org} className=\"cityTab\"><CityWeather loc = {true} cityName = {String(location.city).toUpperCase()} id = {location.id} deletePageEvent = {e => deletePage(e)} /></div>;\n\n  return (\n    <div className=\"App\">\n      {searcher}\n      <div className=\"citiesList\">\n        {locationComp}\n        {listOfCities}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}